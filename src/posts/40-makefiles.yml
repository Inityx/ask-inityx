title: What's up with the Makefile syntax?
content:
  - >
    Make is a dependency-based system. Makefiles consist of a set of targets, and a set of dependencies for each
    target.
  - |
    <pre class="prettyprint">
    CXX=g++
    
    all: app.exe
    
    app.exe: main.cpp foo.o bar.o
    	$(CXX) main.cpp foo.o bar.o -o app.exe
    
    foo.o: foo.cpp foo.h
    	$(CXX) -c foo.cpp
    
    bar.o: bar.cpp bar.h
    	$(CXX) -c bar.cpp
    </pre>
  - >
    <mark>all</mark> is the default target, and the other targets in this
    example represent files. Each item listed after a target is a dependency of
    that target. If any dependency is newer than the target's file, the target must
    be rebuilt; this check happens recursively through the tree of dependencies
    until all dependent files have been updated.
  - >
    For example, if everything has been compiled up to date and then the file
    <mark>foo.cpp</mark> is modified, a chain of rebuilds is triggered when
    building <mark>all</mark> or <mark>app.exe</mark>:
  - |
    <ul>
      <li><mark>all</mark> depends on <mark>app.exe</mark></li>
      <li><mark>app.exe</mark> depends on <mark>foo.o</mark></li>
      <li><mark>foo.o</mark> depends on <mark>foo.cpp</mark></li>
    </ul>
  - >
    Make then re-runs the necessary targets in reverse order. Notice though
    that <mark>bar.o</mark> does not need to be rebuilt, and Make takes advantage
    of this; it's very important if compilation takes a long time.
  - >
    Another useful aspect of Makefiles is the usage of variables; in this example,
    the variable <mark>CXX</mark> is used to reference our compiler. Another common
    usage of these variables is marking compilation flags like <mark>-g</mark> and
    <mark>--std=c++11</mark>. These variables centralize options that would otherwise
    need to be changed in many different places: if we want to compile using 
    <mark>clang++</mark> instead of <mark>g++</mark>, it is very easy to convert the
    entire project at once.
