title: Why is <mark>std::</mark> necessary with the C++ standard library?
content:
  - >
    Namespacing is a way to encapsulate code, just like attaching it to an
    object as a method or putting it in a function; namespacing is just one level
    above either of those. In fact, the syntax for using static member variables
    and functions is the same as namespaces. The C++ Standard Library and Standard
    Template Library are declared in the <mark>std</mark> namespace. This means
    that if you want to use a string, you specify that you want the Standard
    Library string by saying <mark>std::string</mark>.
  - |
    <pre class="prettyprint lang-cpp">
    #include &lt;yours&gt;
    
    namespace my {
        struct Point {
            int x;
            int y;
            
            Point(int ix, int iy):
                x(ix), y(iy) {}
        };
        
        void foo(Point x) {
            // do something with x
        }
    }
    
    int main() {
        your::Point x(5,6);
        your::foo(x);
        
        my::Point y(5,6);
        my::foo(y);
    }
    </pre>
  - >
    In this example, we have our namespace <mark>my</mark>, and the namespace
    <mark>your</mark> from the included library. Namespacing allows both versions
    of the code to exist simultaneously in the same scope. It is also useful for
    associating code which may be spread across several files, and making your code
    more self-explanatory by adding context to otherwise ambiguous names.

  - >
    Sometimes, however, it's really annoying and unnecessary to preserve explicit
    namespacing in your code; a prime example of this is when using the C++
    <mark>iostream</mark> library. The way that everyone seems to change this is
    by using <mark>using namespace std;</mark> at the top of their code. This is
    sub-optimal, as it forces you to assume the <mark>std</mark> namespace for the
    entirety of your code. A much better way to do that is by specifying individual
    elements of the target namespace to bring into the current one, with statements
    like <mark>using std::cout;</mark> or <mark>using std::string;</mark>.
